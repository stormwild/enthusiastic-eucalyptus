scalar GraphQLDate

input UserInput {
  username: String
  password: String
  email: String
}

input InstructorInput {
  name: String!
  photo: String
  excerpt: String
  bio: String
  courses: [ID!]!
}

input CourseCategoryInput {
  name: String!
}

input CourseInput {
  title: String!
  description: String!
  instructors: [ID!]!
  fee: Float
  category: CourseCategoryInput
}

type Role {
  _id: ID!
  name: String!
}

type User {
  _id: ID!
  username: String!
  password: String!
  email: String!
  roles: [Role!]!
}

type CourseCategory {
  _id: ID!
  name: String!
}

type Instructor {
  _id: ID!
  name: String!
  photo: String
  excerpt: String
  bio: String
  courses: [Course!]!
}

type Course {
  _id: ID!
  title: String!
  description: String!
  instructors: [Instructor!]!
  fee: Float
  category: CourseCategory!
}

input ScheduleInput {
  _id: ID
  course: CourseInput!
  dates: [GraphQLDate!]!
}

type Schedule {
  _id: ID!
  course: Course!
  dates: [GraphQLDate!]!
}

type Student {
  _id: ID!
  name: String!
}

type Query {
  courseCategories: [CourseCategory]
  instructors: [Instructor]
  courses: [Course]
  schedules: [Schedule]
  users: [User]
  roles: [Role]

  courseCategory(id: ID!): CourseCategory
}

type Mutation {
  addCourseCategory(name: String!): CourseCategory!
  updateCoureCategory(_id: ID!, name: String!): CourseCategory!

  addInstructor(instructor: InstructorInput!): Instructor!
  updateInstructor(_id: ID!, instructor: InstructorInput!): Instructor!

  addCourse(course: CourseInput!): Course!
  updateCourse(_id: ID!, course: CourseInput!): Course!

  addRole(name: String): Role!
  updateRole(_id: ID!, name: String): Role

  addUser(user: UserInput!): User!
  updateUser(_id: ID!, user: UserInput!): User!

  addSchedule(schedule: ScheduleInput!): Schedule
  updateSchedule(_id: ID!, schedule: ScheduleInput!): Schedule
}
